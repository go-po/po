// Code generated by sqlc. DO NOT EDIT.
// source: position.sql

package db

import (
	"context"
)

const getSnapshotPosition = `-- name: GetSnapshotPosition :one
SELECT no, content_type, data
FROM po_pos
WHERE stream = $1
  AND listener = $2
`

type GetSnapshotPositionParams struct {
	Stream   string `json:"stream"`
	Listener string `json:"listener"`
}

type GetSnapshotPositionRow struct {
	No          int64  `json:"no"`
	ContentType string `json:"content_type"`
	Data        []byte `json:"data"`
}

func (q *Queries) GetSnapshotPosition(ctx context.Context, arg GetSnapshotPositionParams) (GetSnapshotPositionRow, error) {
	row := q.db.QueryRowContext(ctx, getSnapshotPosition, arg.Stream, arg.Listener)
	var i GetSnapshotPositionRow
	err := row.Scan(&i.No, &i.ContentType, &i.Data)
	return i, err
}

const getSubscriberPosition = `-- name: GetSubscriberPosition :one
SELECT updated, created, stream, listener, no, data, content_type
FROM po_pos
WHERE stream = $1
  AND listener = $2
    FOR UPDATE
`

type GetSubscriberPositionParams struct {
	Stream   string `json:"stream"`
	Listener string `json:"listener"`
}

func (q *Queries) GetSubscriberPosition(ctx context.Context, arg GetSubscriberPositionParams) (PoPo, error) {
	row := q.db.QueryRowContext(ctx, getSubscriberPosition, arg.Stream, arg.Listener)
	var i PoPo
	err := row.Scan(
		&i.Updated,
		&i.Created,
		&i.Stream,
		&i.Listener,
		&i.No,
		&i.Data,
		&i.ContentType,
	)
	return i, err
}

const setSubscriberPosition = `-- name: SetSubscriberPosition :exec
INSERT INTO po_pos (stream, listener, no, content_type, data)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (stream, listener) DO UPDATE
    SET no           = excluded.no,
        content_type = excluded.content_type,
        data         = excluded.data,
        updated      = NOW()
WHERE po_pos.stream = $1
  AND po_pos.listener = $2
`

type SetSubscriberPositionParams struct {
	Stream      string `json:"stream"`
	Listener    string `json:"listener"`
	No          int64  `json:"no"`
	ContentType string `json:"content_type"`
	Data        []byte `json:"data"`
}

func (q *Queries) SetSubscriberPosition(ctx context.Context, arg SetSubscriberPositionParams) error {
	_, err := q.db.ExecContext(ctx, setSubscriberPosition,
		arg.Stream,
		arg.Listener,
		arg.No,
		arg.ContentType,
		arg.Data,
	)
	return err
}
