// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getNextIndex = `-- name: GetNextIndex :one
SELECT next
FROM po_msg_index
WHERE stream = $1 FOR UPDATE
`

func (q *Queries) GetNextIndex(ctx context.Context, stream string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNextIndex, stream)
	var next int64
	err := row.Scan(&next)
	return next, err
}

const getRecordByStream = `-- name: GetRecordByStream :one
SELECT created, updated, stream, no, grp, grp_no, content_type, data
FROM po_msgs
WHERE stream = $1
  AND no = $2
`

type GetRecordByStreamParams struct {
	Stream string `json:"stream"`
	No     int64  `json:"no"`
}

func (q *Queries) GetRecordByStream(ctx context.Context, arg GetRecordByStreamParams) (PoMsg, error) {
	row := q.db.QueryRowContext(ctx, getRecordByStream, arg.Stream, arg.No)
	var i PoMsg
	err := row.Scan(
		&i.Created,
		&i.Updated,
		&i.Stream,
		&i.No,
		&i.Grp,
		&i.GrpNo,
		&i.ContentType,
		&i.Data,
	)
	return i, err
}

const getRecords = `-- name: GetRecords :many
select created, updated, stream, no, grp, grp_no, content_type, data
from po_msgs
`

func (q *Queries) GetRecords(ctx context.Context) ([]PoMsg, error) {
	rows, err := q.db.QueryContext(ctx, getRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PoMsg
	for rows.Next() {
		var i PoMsg
		if err := rows.Scan(
			&i.Created,
			&i.Updated,
			&i.Stream,
			&i.No,
			&i.Grp,
			&i.GrpNo,
			&i.ContentType,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsByGroup = `-- name: GetRecordsByGroup :many
SELECT created, updated, stream, no, grp, grp_no, content_type, data
FROM po_msgs
WHERE grp = $1
  AND grp_no IS NOT NULL
  AND grp_no > $2
ORDER BY grp_no
`

type GetRecordsByGroupParams struct {
	Grp   string        `json:"grp"`
	GrpNo sql.NullInt64 `json:"grp_no"`
}

func (q *Queries) GetRecordsByGroup(ctx context.Context, arg GetRecordsByGroupParams) ([]PoMsg, error) {
	rows, err := q.db.QueryContext(ctx, getRecordsByGroup, arg.Grp, arg.GrpNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PoMsg
	for rows.Next() {
		var i PoMsg
		if err := rows.Scan(
			&i.Created,
			&i.Updated,
			&i.Stream,
			&i.No,
			&i.Grp,
			&i.GrpNo,
			&i.ContentType,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecordsByStream = `-- name: GetRecordsByStream :many
SELECT created, updated, stream, no, grp, grp_no, content_type, data
FROM po_msgs
WHERE stream = $1
  AND no > $2
ORDER BY no
`

type GetRecordsByStreamParams struct {
	Stream string `json:"stream"`
	No     int64  `json:"no"`
}

func (q *Queries) GetRecordsByStream(ctx context.Context, arg GetRecordsByStreamParams) ([]PoMsg, error) {
	rows, err := q.db.QueryContext(ctx, getRecordsByStream, arg.Stream, arg.No)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PoMsg
	for rows.Next() {
		var i PoMsg
		if err := rows.Scan(
			&i.Created,
			&i.Updated,
			&i.Stream,
			&i.No,
			&i.Grp,
			&i.GrpNo,
			&i.ContentType,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insert = `-- name: Insert :exec
INSERT INTO po_msgs (stream, no, grp, grp_no, content_type, data)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertParams struct {
	Stream      string        `json:"stream"`
	No          int64         `json:"no"`
	Grp         string        `json:"grp"`
	GrpNo       sql.NullInt64 `json:"grp_no"`
	ContentType string        `json:"content_type"`
	Data        []byte        `json:"data"`
}

func (q *Queries) Insert(ctx context.Context, arg InsertParams) error {
	_, err := q.db.ExecContext(ctx, insert,
		arg.Stream,
		arg.No,
		arg.Grp,
		arg.GrpNo,
		arg.ContentType,
		arg.Data,
	)
	return err
}

const setGroupNumber = `-- name: SetGroupNumber :one
UPDATE po_msgs
SET grp_no = $1
WHERE stream = $2
  AND no = $3
  AND grp_no = 0
RETURNING created, updated, stream, no, grp, grp_no, content_type, data
`

type SetGroupNumberParams struct {
	GrpNo  sql.NullInt64 `json:"grp_no"`
	Stream string        `json:"stream"`
	No     int64         `json:"no"`
}

func (q *Queries) SetGroupNumber(ctx context.Context, arg SetGroupNumberParams) (PoMsg, error) {
	row := q.db.QueryRowContext(ctx, setGroupNumber, arg.GrpNo, arg.Stream, arg.No)
	var i PoMsg
	err := row.Scan(
		&i.Created,
		&i.Updated,
		&i.Stream,
		&i.No,
		&i.Grp,
		&i.GrpNo,
		&i.ContentType,
		&i.Data,
	)
	return i, err
}

const setNextIndex = `-- name: SetNextIndex :exec
INSERT INTO po_msg_index (stream, next)
VALUES ($1, $2)
ON CONFLICT (stream) DO UPDATE
    SET next = $2
WHERE po_msg_index.next = $2 - 1
  AND po_msg_index.stream = $1
`

type SetNextIndexParams struct {
	Stream string `json:"stream"`
	Next   int64  `json:"next"`
}

func (q *Queries) SetNextIndex(ctx context.Context, arg SetNextIndexParams) error {
	_, err := q.db.ExecContext(ctx, setNextIndex, arg.Stream, arg.Next)
	return err
}
