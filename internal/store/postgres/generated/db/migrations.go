package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_create_records_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1_create_records_down_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_down_sql,
		"1_create_records.down.sql",
	)
}

var __1_create_records_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\xb9\x15\x24\x90\xf6\xce\x89\xb6\x69\x1b\x89\x0d\x5a\x1a\xb6\xd5\x5e\x22\x03\x26\x58\x8a\xc7\x96\x3d\xd9\xb6\xfb\xf4\xab\x38\x71\xd2\x50\x52\xfe\xe5\x16\xd9\xfe\xe6\x9b\x99\xdf\xcc\x78\x0c\x02\x05\x09\x96\x83\x5d\xef\xb8\x64\xb0\x55\x06\x68\xc7\x41\x72\x6b\x59\xc6\x6d\x70\xb7\x08\xa7\x49\x08\xc9\xf4\x76\x16\x42\xf4\x00\xf1\x3c\x81\xf0\x35\x7a\x4e\x9e\x41\xab\x54\xda\xcc\x06\x83\x20\x00\x00\x58\x1b\xce\x88\x6f\xc0\x7d\x24\x24\xb7\xc4\xa4\x86\x97\x28\x79\x82\x24\xfa\x19\xc2\x9f\x79\x1c\xc2\x7d\xf8\x30\x5d\xce\x12\x88\xe7\x2f\x83\xa1\x53\x8b\x97\xb3\xd9\xc8\x29\x14\x7a\x73\xa5\x82\x25\xc3\x99\xac\x04\xe0\xf7\x74\x71\xf7\x34\x5d\xc0\x91\xaf\xab\x80\xea\xd3\xd1\x6d\xf4\x18\xc5\xc9\x81\x37\xde\xc3\x8f\x03\x0a\x99\xd1\xed\xc5\xbf\xcc\xac\x77\xcc\x9c\xec\x01\xc6\x63\xc8\x8c\x2a\x34\x08\x84\x47\xe5\x05\xd3\xc6\x56\xaf\xa5\x3d\xc1\xc6\xce\x5a\x21\x71\xa4\x94\x3e\x34\x3f\xdb\x8e\x53\xd8\x30\x62\xcd\xd1\xea\x83\x38\x3b\x1a\xbe\x51\x08\x86\x93\x20\x58\x2b\x29\x39\x12\x28\x04\x62\xab\x9c\x7b\x72\x40\x58\xb8\x29\xfd\x31\x81\xb6\x41\xee\x66\x12\x78\xea\xa2\xf8\x3e\x7c\x3d\x4c\x5d\x5a\xb5\x3a\x15\xb8\xe1\xef\x30\x8f\x1b\xcd\x41\x75\x30\x9c\x9c\x22\x52\x96\xf6\xab\x42\x66\x74\xfb\x7c\x19\x47\xbf\x96\x27\x59\xc1\x42\xae\xb8\x49\x8b\x3e\x4b\x23\x40\x75\x96\x6e\xe9\xce\x35\xbf\x57\x38\x33\x7a\x54\xf3\x31\x6c\xcb\xd6\x3f\xac\x55\xb2\xc1\xa0\x33\x6e\xed\xa4\xbd\x09\xda\xb9\x5f\xf8\xa7\x90\xc3\x86\x6f\x59\x91\x53\x3d\x69\xa8\x08\xb0\xc8\xf3\x51\x67\xda\x2f\x7a\xec\xc7\xf4\xb2\x09\xe5\xef\xe4\x48\x14\x99\x40\x3a\x70\xdd\x47\xae\x86\xd3\x47\xfe\x8e\xc4\x9a\x81\x0e\x8e\xe5\x16\x74\xa1\xaa\xea\x03\xb3\x56\x64\x58\x66\xac\x80\xd5\x19\x7c\x42\xf5\x68\x3b\xab\x18\x9e\x95\xfd\x5e\xd6\x0e\x5a\x78\x8f\xf4\x52\x93\xd9\xeb\xa2\xfb\x4e\xec\x46\xb7\xa0\x3d\x8b\xfb\x0c\x85\xce\xda\xbd\x68\xc7\xe4\xc2\x12\x47\x6e\x2e\x57\xe8\x2c\xee\x5e\x36\xbe\x53\xb8\x66\xcf\x5d\xbf\x6b\x7b\xf9\xd4\x64\x1c\x99\x02\xb7\xca\x48\x46\x42\x21\xb0\x95\x2a\x08\x76\xea\x0d\xb6\xcc\x34\x38\xb6\x55\x14\xf6\x64\x34\x35\x19\x0f\xa5\x7f\x5e\xd3\xe9\x52\x52\xe8\x3d\x34\x5b\xcc\x5f\x2b\x0d\xff\x0f\x00\x00\xff\xff\x17\x0b\x57\x31\x42\x08\x00\x00")

func _1_create_records_up_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_up_sql,
		"1_create_records.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_create_records.down.sql": _1_create_records_down_sql,
	"1_create_records.up.sql":   _1_create_records_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_create_records.down.sql": &_bintree_t{_1_create_records_down_sql, map[string]*_bintree_t{}},
	"1_create_records.up.sql":   &_bintree_t{_1_create_records_up_sql, map[string]*_bintree_t{}},
}}
