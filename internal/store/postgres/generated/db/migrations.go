package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_create_records_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1_create_records_down_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_down_sql,
		"1_create_records.down.sql",
	)
}

var __1_create_records_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x41\x6f\x9b\x30\x14\xc7\xef\x7c\x8a\x77\x6b\x90\x1a\x69\x3b\xe7\x44\x5b\xda\xa2\xa5\x64\x4b\xc9\xda\xee\x82\x0c\xbc\x80\xa5\x60\x5b\xb6\xd9\xd6\x7d\xfa\x09\x12\x0c\x34\x40\x69\x52\x6e\x96\xed\x1f\xff\x67\xff\x1e\xcc\xe7\x40\x19\xd5\x94\xec\x40\xc5\x19\xe6\x04\xb6\x5c\x82\xce\x10\x72\x54\x8a\xa4\xa8\xac\xeb\xb5\xeb\x04\x2e\x04\xce\xd5\xd2\x05\xef\x16\xfc\x55\x00\xee\xb3\xf7\x18\x3c\x82\xe0\xa1\x59\x36\xb3\x00\x00\x68\x02\xed\x27\xa2\xa9\x42\x59\xd2\x47\x9f\x12\xe9\x6f\x96\xcb\xcb\x8a\x11\x4b\x24\x1a\x0d\x48\xd3\x1c\x95\x26\xb9\x80\x27\x2f\xb8\x87\xc0\x7b\x70\xe1\xd7\xca\x77\xe1\xc6\xbd\x75\x36\xcb\x00\xfc\xd5\xd3\xcc\x7e\xc3\x50\x5a\x22\xc9\xcd\x0b\x7e\x3a\xeb\xeb\x7b\x67\x3d\x9e\xe2\x6d\x0e\xc6\x3b\x93\x57\xde\x9d\xe7\x07\x3d\xbb\xea\x1c\x5f\x7a\x18\xa9\x14\xed\xa5\xbf\x89\x8c\x33\x22\x27\xe7\x80\xf9\x1c\x52\xc9\x0b\x01\x94\xc1\x1d\xdf\x1f\x0f\x67\x1a\x99\x0e\xf5\xab\xc0\x13\x90\x15\x23\x21\x9a\xb4\x26\xa3\x57\x8d\xe4\x3d\xc2\xd1\x35\x71\x29\x71\x47\x34\xe5\x2c\xa4\xc9\xe4\x1c\x66\xff\xf7\xb5\xf7\xe0\xac\x5f\xe0\x9b\xfb\x02\x33\x9a\xd8\x96\xbd\xb0\xac\x98\xe7\x39\x32\x0d\x9c\x81\x26\xd1\x0e\xdb\x8a\x01\x55\x70\x51\x56\x4f\x28\x53\xc6\xcf\x8b\x85\x55\x2b\xea\xf9\x37\xee\xf3\xb0\xa2\xe1\x5e\x8a\x90\xb2\x04\xff\xc2\xca\xef\xb0\x67\xfb\x49\x7b\x31\x15\x96\x4a\x31\x40\x4a\xa5\x68\x30\x1b\xdf\xfb\xb1\x99\x1c\x8d\x15\x79\x84\x32\x2c\xc6\x22\x5e\x02\xe3\x76\x53\xf4\x40\x5f\xaa\x22\x52\xb1\xa4\xa2\xbc\x9e\xba\x39\xbb\x8d\xd5\xf4\xd5\x1f\xaa\xb3\x6a\x08\xff\x38\x43\x48\x70\x4b\x8a\x9d\xee\xed\xab\x42\x24\xe7\x22\xba\xad\x79\x92\xbe\x87\xe2\xca\xa3\xfa\x80\x79\x23\xcd\x1d\xd1\x94\x32\xfd\x1e\xc1\x20\x06\x55\xed\x9c\x7a\xe5\xab\xe0\x8a\x96\x23\xe0\x5b\x20\x75\xed\x4d\xfe\xb6\xbe\xe3\xaa\x74\xd0\xb5\x2f\x9d\x83\x38\x68\x53\x95\xc7\xd9\x71\x1c\xe3\x4f\x67\xd7\x04\x95\x18\x11\x2a\xe3\xba\x57\xa3\xf3\x2d\x3a\x5f\xa2\xd3\x1c\x3a\x54\x55\x1a\xf4\x09\x0a\x0d\x1a\x54\xff\x1d\xe6\x5f\x8f\x09\x9d\xcf\xf0\x89\x1f\xe1\xd6\xcf\xe0\x83\x55\x0c\x5b\x5c\x5f\x78\x65\x70\x3d\x02\xa3\x32\x61\x49\x15\x7d\xba\xbb\x35\xd0\x78\xdb\x1c\x7e\x8f\xb5\xe6\xf5\x8d\xb1\xcd\x7a\x7b\x61\xfd\x0f\x00\x00\xff\xff\x59\xca\xd0\xc2\xb5\x08\x00\x00")

func _1_create_records_up_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_up_sql,
		"1_create_records.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_create_records.down.sql": _1_create_records_down_sql,
	"1_create_records.up.sql":   _1_create_records_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_create_records.down.sql": &_bintree_t{_1_create_records_down_sql, map[string]*_bintree_t{}},
	"1_create_records.up.sql":   &_bintree_t{_1_create_records_up_sql, map[string]*_bintree_t{}},
}}
