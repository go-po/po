package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_create_records_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1_create_records_down_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_down_sql,
		"1_create_records.down.sql",
	)
}

var __1_create_records_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xcf\x6e\xe2\x30\x10\xc6\xef\x79\x8a\xb9\x15\x24\x90\xf6\xde\x53\xda\x86\x36\x12\x1b\xb4\x10\xb6\xd5\x5e\x22\x03\x26\x58\x4a\x3c\x96\x3d\xd9\x6d\xf7\xe9\x57\x71\x62\xd3\xb0\xa4\xfc\xcb\x2d\xb2\xe7\x9b\xcf\x33\xbf\x99\xf1\x18\x84\x14\x24\x58\x01\x66\xbd\xe3\x25\x83\x2d\x6a\xa0\x1d\x87\x92\x1b\xc3\x72\x6e\x82\xc7\x79\x14\xa6\x11\xa4\xe1\xc3\x34\x82\x78\x02\xc9\x2c\x85\xe8\x2d\x5e\xa4\x0b\x50\x98\x95\x26\x37\xc1\x20\x08\x00\x00\xd6\x9a\x33\xe2\x1b\xb0\x1f\x89\x92\x1b\x62\xa5\x82\xd7\x38\x7d\x81\x34\xfe\x1e\xc1\xaf\x59\x12\xc1\x53\x34\x09\x97\xd3\x14\x92\xd9\xeb\x60\x68\xd5\x92\xe5\x74\x3a\xb2\x0a\x95\xda\xdc\xa8\x60\x48\x73\x56\x36\x02\xf0\x33\x9c\x3f\xbe\x84\x73\x38\xf1\x75\x15\x24\x7e\x3a\x7a\x88\x9f\xe3\x24\x3d\x12\xe3\x3c\x7c\x3b\xa2\x90\x6b\xb5\xbf\xf8\x9b\xe9\xf5\x8e\xe9\xb3\x3d\xc0\x78\x0c\xb9\xc6\x4a\x81\x90\xf0\x8c\x4e\x30\xf3\xb6\x7a\x2d\x1d\x08\x7a\x3b\x6b\x94\xc4\x25\x65\xf4\xa1\xf8\xc5\x76\xac\xc2\x86\x11\xf3\x47\xab\x0f\xe2\xec\x64\x7a\xaf\x10\x0c\xef\x83\x60\x8d\x65\xc9\x25\x01\x4a\x20\xb6\x2a\xb8\x23\x07\x84\x81\xbb\xda\x1f\x13\xd2\x78\xe4\xee\xee\x03\x47\x5d\x9c\x3c\x45\x6f\xc7\xa9\xcb\x9a\x56\x67\x42\x6e\xf8\x3b\xcc\x12\xaf\x39\x68\x0e\x86\xf7\xe7\x88\xd4\xa5\xfd\x5f\x21\xd7\x6a\x1f\xbe\x4c\xe2\x1f\xcb\xb3\xac\xc8\xaa\x5c\x71\x9d\x55\x7d\x96\x46\x20\xf1\x22\xdd\xda\x9d\x6d\x7e\xaf\x70\xae\xd5\xa8\xe5\x63\xb8\x2f\x5b\xff\xb0\x36\x8f\x0d\x06\x9d\x71\xdb\x4f\xda\x1f\x41\x3b\xfb\x0b\x7f\x51\x72\xd8\xf0\x2d\xab\x0a\x6a\x27\x4d\x22\x81\xac\x8a\x62\xd4\x99\xf6\xab\x82\xdd\x98\x5e\x37\xa1\xfc\x9d\x2c\x89\x22\x17\x92\x8e\x5c\x77\x99\x9b\xe1\xec\x66\x76\xc3\xb9\x42\x2c\x8e\xe6\x72\xc1\x93\x70\xba\x88\x7c\xf0\x57\x18\xb7\x00\x75\x58\xae\x57\xa8\xf5\xd9\xb4\x0e\x98\x31\x22\x97\x75\xb9\x10\x58\xfb\xfc\x4f\x9c\x9f\x64\xa1\xc9\xe1\x40\xab\x1b\x7e\x08\x43\xeb\xc2\xa3\xd6\x30\x7c\x82\x08\x85\xe6\x80\x05\xfb\x9d\xd9\xd3\x6e\x5b\x7a\xd6\xff\x05\x0a\x9d\xe5\x7d\xd5\xa6\x2a\x84\x21\x2e\xb9\xbe\x5e\xa1\xb3\xfe\x7b\x09\xfb\x4a\xe1\x96\x6d\x79\xfb\xc6\xee\x05\x55\x61\xb3\x6e\x15\x1a\x41\x02\x25\xe0\xd6\x93\xe8\xeb\x76\x36\x92\x0a\xfd\xd6\x73\xb1\x2d\x91\xf6\x05\x28\x5d\x4a\xcf\xa3\xbb\x56\xfb\xfb\x17\x00\x00\xff\xff\xd9\x4e\x43\x5b\x77\x08\x00\x00")

func _1_create_records_up_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_up_sql,
		"1_create_records.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_create_records.down.sql": _1_create_records_down_sql,
	"1_create_records.up.sql":   _1_create_records_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_create_records.down.sql": {_1_create_records_down_sql, map[string]*_bintree_t{}},
	"1_create_records.up.sql":   {_1_create_records_up_sql, map[string]*_bintree_t{}},
}}
