package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_create_records_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1_create_records_down_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_down_sql,
		"1_create_records.down.sql",
	)
}

var __1_create_records_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4f\x73\x9b\x30\x10\xc5\xef\x7c\x8a\xbd\xc5\x9e\x89\x67\x7a\xcf\x89\x24\x24\x61\xea\xe0\xd6\xc1\x4d\xd2\x0b\x23\x9b\x35\xd6\x0c\x68\x35\x92\x68\x93\x7e\xfa\x0e\x7f\x24\x1b\x17\xdb\x14\x6e\x8c\xb4\x4f\x6f\xa5\xdf\xbe\xd9\x0c\xb8\xe0\x86\xb3\x1c\xf4\x66\x87\x05\x83\x2d\x29\x30\x3b\x84\x02\xb5\x66\x19\x6a\xef\x6e\x19\xf8\x71\x00\xb1\x7f\x3b\x0f\x20\x7c\x80\x68\x11\x43\xf0\x16\xbe\xc4\x2f\x20\x29\x29\x74\xa6\xbd\x89\x07\x00\xc0\x53\x38\xfc\xd6\x3c\xd3\xa8\x2a\xe5\xb3\x5f\x25\x17\xad\xe6\xf3\xeb\x5a\x63\xa3\x90\x19\x74\x42\x86\x17\xa8\x0d\x2b\x24\xbc\x86\xf1\x13\xc4\xe1\x73\x00\x3f\x17\x51\x00\xf7\xc1\x83\xbf\x9a\xc7\x10\x2d\x5e\x27\xd3\x23\x0d\x6d\x14\xb2\xc2\x1d\xf0\xc3\x5f\xde\x3d\xf9\xcb\xf3\x2e\x8e\x7d\x08\xea\x2c\xde\x86\x8f\x61\x14\xf7\x54\x59\x1f\x5f\x7a\x34\x32\x25\x0f\xb7\xfe\x62\x6a\xb3\x63\x6a\xb0\x0f\x98\xcd\x20\x53\x54\x4a\xe0\x02\x1e\xa9\xb9\x1e\x12\x06\x85\x49\xcc\xa7\xc4\x11\x92\xb5\x46\xca\x0c\x3b\x58\x5c\x7f\x1a\x64\x97\x14\xfe\x79\x26\x52\x0a\x73\x66\x38\x89\x84\xa7\x83\x7d\xb8\xfa\x6f\xcb\xf0\xd9\x5f\xbe\xc3\xd7\xe0\x1d\x26\x3c\x9d\x7a\xd3\x1b\xcf\xdb\x50\x51\xa0\x30\x40\x02\x0c\x5b\xe7\x68\xf1\x02\xae\xe1\xaa\xea\x9c\x71\xa1\x1d\x97\x57\x37\x9e\x45\x33\x8c\xee\x83\xb7\x7e\x34\x93\x06\x86\x84\x8b\x14\x3f\x60\x11\x39\xcd\x49\xb3\x30\xbd\x19\x22\x92\x29\xd9\xa3\x90\x29\xb9\x2f\x5f\x45\xe1\xf7\xd5\x20\x2b\xa2\x2c\xd6\xa8\x92\xf2\x94\xa5\x6b\x10\x34\xdd\x37\x77\x7a\xee\x1a\x4b\xed\xf0\x95\x32\xad\x07\x67\x3f\x31\xbf\xb9\xd9\xd5\xbf\xf0\x87\x04\x42\x8a\x5b\x56\xe6\xa6\x9d\x18\x41\x06\x44\x99\xe7\xdd\xa9\x1b\x55\x6c\xc7\x6d\xdc\x9c\xe1\x87\x81\x26\x2c\xb8\x30\x3d\xdb\xed\xc9\xcd\x80\x75\x4f\xb6\x03\xb6\x26\xea\x0f\x19\x5b\xfc\xe0\xcf\x5f\x02\x57\x7c\x0e\xb6\xf6\x99\x3b\xc4\x55\x69\x58\xfb\x6c\x5e\x0e\x98\xd6\x3c\x13\xd5\x75\x11\xb0\xb6\xfd\x03\x1a\x2f\x92\xd0\x9c\x61\x71\xa8\xd8\x3a\x66\xa1\x75\xe1\x80\x68\x48\xbb\x40\x84\x24\x7d\xc4\x42\xfd\x0d\x7c\xd3\x33\x31\x3c\x4a\xa1\x13\xc2\xa3\x72\x2a\xe7\xda\xa0\x40\x35\x5e\xa1\x13\xe2\x27\x09\x3b\xa7\xd0\xc9\xca\x91\x49\x79\x90\xd8\xff\xd9\xc5\x49\x50\x25\x35\xa1\x28\x49\xf3\x2a\x83\x81\xb6\x8e\x44\x77\x6f\x83\x91\x94\xe4\xb2\xc9\xd6\xb6\x44\xd6\x1d\x90\xb0\x47\x3a\x1e\xed\xb6\xca\xdf\xdf\x00\x00\x00\xff\xff\x23\x43\x26\xf7\x42\x08\x00\x00")

func _1_create_records_up_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_up_sql,
		"1_create_records.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_create_records.down.sql": _1_create_records_down_sql,
	"1_create_records.up.sql":   _1_create_records_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_create_records.down.sql": &_bintree_t{_1_create_records_down_sql, map[string]*_bintree_t{}},
	"1_create_records.up.sql":   &_bintree_t{_1_create_records_up_sql, map[string]*_bintree_t{}},
}}
