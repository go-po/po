package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __1_create_records_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1_create_records_down_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_down_sql,
		"1_create_records.down.sql",
	)
}

var __1_create_records_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x41\x6f\x9b\x30\x14\xc7\xef\x7c\x8a\x77\x6b\x90\x1a\x69\xf7\x9c\x68\x4b\x5b\xb4\x94\x6c\x94\xac\xed\x2e\xc8\xc0\x2b\x58\x0a\xb6\x65\x9b\x6d\xdd\xa7\x9f\x20\xc1\x40\x0b\x94\x24\xe3\x66\xd9\xfe\xf1\x7f\xf6\xef\xc1\x72\x09\x94\x51\x4d\xc9\x0e\x54\x92\x63\x41\xe0\x95\x4b\xd0\x39\x42\x81\x4a\x91\x0c\x95\x75\x1d\xb8\x4e\xe8\x42\xe8\x5c\xad\x5d\xf0\x6e\xc1\xdf\x84\xe0\x3e\x7b\x8f\xe1\x23\x08\x1e\x99\x65\x0b\x0b\x00\x80\xa6\xd0\x7d\x62\x9a\x29\x94\x15\x7d\xf2\xa9\x90\xfe\x76\xbd\xbe\xac\x19\x89\x44\xa2\xd1\x80\x34\x2d\x50\x69\x52\x08\x78\xf2\xc2\x7b\x08\xbd\x07\x17\x7e\x6e\x7c\x17\x6e\xdc\x5b\x67\xbb\x0e\xc1\xdf\x3c\x2d\xec\x77\x0c\xa5\x25\x92\xc2\xbc\xe0\x87\x13\x5c\xdf\x3b\xc1\x74\x8a\xf7\x39\x18\xef\x4d\x5e\x79\x77\x9e\x1f\x0e\xec\x6a\x72\x7c\x19\x60\x64\x52\x74\x97\xfe\x22\x32\xc9\x89\x9c\x9d\x03\x96\x4b\xc8\x24\x2f\x05\x50\x06\x77\x7c\x7f\x3c\x9c\x69\x64\x3a\xd2\x6f\x02\x4f\x40\xd6\x8c\x94\x68\xd2\x99\x8c\xdf\x34\x92\xcf\x08\x1f\xae\x89\x4b\x89\x3b\xa2\x29\x67\x11\x4d\x67\xe7\x30\xfb\xbf\x05\xde\x83\x13\xbc\xc0\x57\xf7\x05\x16\x34\xb5\x2d\x7b\x65\x59\x09\x2f\x0a\x64\x1a\x38\x03\x4d\xe2\x1d\x76\x15\x03\xaa\xe0\xa2\xaa\x9e\x50\xa6\x8c\x9f\x17\x2b\xab\x51\xd4\xf3\x6f\xdc\xe7\x71\x45\xa3\xbd\x14\x11\x65\x29\xfe\x81\x8d\xdf\x63\x2f\xf6\x93\xf6\x6a\x2e\x2c\x93\x62\x84\x94\x49\xd1\x62\xb6\xbe\xf7\x7d\x3b\x3b\x1a\x2b\x8b\x18\x65\x54\x4e\x45\xbc\x04\xc6\xed\xb6\xe8\x91\xbe\x54\x65\xac\x12\x49\x45\x75\x3d\x4d\x73\xf6\x1b\xab\xed\xab\xdf\x54\xe7\xf5\x10\xfe\x72\x86\x90\xe2\x2b\x29\x77\x7a\xb0\xaf\x4a\x91\x9e\x8b\xe8\xb7\xe6\x49\xfa\x1e\x8a\xab\x8e\xea\x08\xf3\x26\x9a\x3b\xa6\x19\x65\xfa\x33\x82\x41\x8c\xaa\xda\x3b\xf5\xda\x57\xc1\x15\xad\x46\xc0\x5f\x81\x34\xb5\xb7\xf9\xbb\xfa\x4e\xab\xd2\x43\x37\xbe\xf4\x0e\xe2\xa0\x4d\x5d\x1e\x67\x1f\xe3\x18\x7f\x7a\xbb\x66\xa8\xc4\x88\x50\x39\xd7\x83\x1a\x9d\x6f\xd1\xf9\x12\x9d\xe6\xd0\xa1\xaa\xca\xa0\xff\xa0\xd0\x91\x06\x0d\x7c\x86\x4f\xfc\x08\x77\x7e\x06\x47\x56\x31\x6e\x71\x73\xe1\xb5\xc1\xcd\x08\x8c\xca\x84\xa5\x75\xf4\xf9\xee\x36\x40\xe3\x6d\x7b\xf8\x03\xd6\x9a\xd7\xb7\xc6\xb6\xeb\xed\x95\xf5\x2f\x00\x00\xff\xff\x9b\x08\x1e\x70\xb5\x08\x00\x00")

func _1_create_records_up_sql() ([]byte, error) {
	return bindata_read(
		__1_create_records_up_sql,
		"1_create_records.up.sql",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"1_create_records.down.sql": _1_create_records_down_sql,
	"1_create_records.up.sql":   _1_create_records_up_sql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"1_create_records.down.sql": &_bintree_t{_1_create_records_down_sql, map[string]*_bintree_t{}},
	"1_create_records.up.sql":   &_bintree_t{_1_create_records_up_sql, map[string]*_bintree_t{}},
}}
